{"version":3,"sources":["logo.svg","App.js","Components/SearchBar.js","Api/youtube.js","Components/VideoItem.js","Components/VideosList.js","Components/VideoDetail.js","Components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","SearchBar","props","state","term","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","className","onSubmit","this","type","onChange","Component","axios","create","baseURL","VideoItem","video","onVideoSelect","onClick","alt","snippet","title","src","thumbnails","medium","url","VideoList","renderedList","videos","map","key","id","videoId","VideoDetails","videoSrc","allowFullScreen","description","App2","selectedVideo","onTermSubmit","a","youtube","get","params","part","maxResults","q","respons","data","items","VideoDetail","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bbde2537.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React , {Component} from \"react\"\r\n\r\nclass SearchBar extends Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        term : \"\"\r\n    }\r\n\r\n    onInputChange = (event) => {\r\n        this.setState({\r\n            term : event.target.value\r\n        })\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault()\r\n        this.props.onFormSubmit(this.state.term)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className = \"search-bar ui segment\">\r\n                <form className = \"ui form\" onSubmit = {this.onFormSubmit}>\r\n                    <div className = \"field\">\r\n                        <label>Video Search</label>\r\n                        <input type=\"text\" value = {this.state.term} onChange = {this.onInputChange}/>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar","import axios from \"axios\"\r\n\r\nconst API_KEY = 'AIzaSyClwnGoBhgHKAQ3KVNL5Tn3gosyyYHB6-c'\r\n\r\nexport default axios.create({\r\n    baseURL: \"https://www.googleapis.com/youtube/v3\"\r\n})","import React , {Component} from \"react\"\r\nimport \"./VideoItem.css\"\r\n\r\nclass VideoItem extends Component{\r\n    render(){\r\n\r\n        const video = this.props.video\r\n        const onVideoSelect = this.props.onVideoSelect\r\n        \r\n        return(\r\n        <div onClick = {() => { onVideoSelect(video) }} className = \"video-item item\">\r\n            <img alt = {video.snippet.title} className = \"ui image\" src = {video.snippet.thumbnails.medium.url}/>\r\n            <div className = \"content\">\r\n                <div className = \"header\">\r\n                    {video.snippet.title}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoItem","import React, { Component } from \"react\"\r\nimport VideoItem from \"./VideoItem\"\r\n\r\n\r\nclass VideoList extends Component {\r\n\r\n    render() {\r\n        const onVideoSelect = this.props.onVideoSelect\r\n        const renderedList =  this.props.videos.map(video => {\r\n            return <VideoItem key={video.id.videoId} video = {video} onVideoSelect = {onVideoSelect}/>\r\n        })\r\n        return ( \r\n        <div className = \"ui relaxed divide list\"> {renderedList} </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default VideoList","import React , {Component} from \"react\"\r\nimport  \"./VideoDetails.css\"\r\n\r\nclass VideoDetails extends Component{\r\n    render(){\r\n        const video = this.props.video\r\n        if(!video){\r\n            return(\r\n                <div>\r\n                    Loading....\r\n                </div>\r\n            )\r\n        }\r\n        const videoSrc = `https://www.youtube.com/embed/${video.id.videoId}`\r\n        return(\r\n            <div>\r\n                <div className = \"ui embed\"> \r\n                    <iframe title = {\"video player\"} src = {videoSrc} allowFullScreen />\r\n                </div>\r\n                <div className = \"ui segment\">\r\n                    <h4 className = \"ui header\">{video.snippet.title}</h4>\r\n                    <p>{video.snippet.description}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default VideoDetails","import React, { Component } from \"react\"\r\nimport SearchBar from './SearchBar';\r\nimport youtube from \"../Api/youtube\";\r\nimport VideoList from \"./VideosList\"\r\nimport VideoDetails from './VideoDetail';\r\n\r\n\r\n\r\nclass App2 extends Component {\r\n\r\n    componentDidMount(){\r\n        this.onTermSubmit(\"\")\r\n    }\r\n\r\n    state = {videos : [] , selectedVideo : null}\r\n\r\n    onTermSubmit = async (term) => {\r\n        \r\n        const API_KEY = 'AIzaSyClwnGoBhgHKAQ3KVNL5Tn3gosyyYHB6-c'\r\n        \r\n        const respons = await youtube.get(\"/search\" , {\r\n            params : {\r\n                part: \"snippet\",\r\n                maxResults: 20,\r\n                key: API_KEY,\r\n                q : term\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            videos : respons.data.items , \r\n            selectedVideo : respons.data.items[0]\r\n        })\r\n    }\r\n\r\n    onVideoSelect = (video) => {\r\n        this.setState({\r\n            selectedVideo : video\r\n        })\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className = \"ui container\">\r\n                <SearchBar onFormSubmit = {this.onTermSubmit}/>\r\n                <div className = \"ui grid\">\r\n                    <div className = \"ui row\">\r\n                        <div className = \"eleven wide column\">\r\n                        <VideoDetails video = {this.state.selectedVideo}/>\r\n                \r\n                        </div>\r\n                        <div className = \"five wide column\">\r\n                        <VideoList \r\n                                onVideoSelect = {this.onVideoSelect} \r\n                                videos = {this.state.videos}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App2","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport App2 from \"./Components/App\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App2 />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}